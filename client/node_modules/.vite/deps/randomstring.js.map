{
  "version": 3,
  "sources": ["../../randombytes/browser.js", "../../array-uniq/index.js", "../../randomstring/lib/charset.js", "../../randomstring/lib/randomstring.js", "../../randomstring/index.js"],
  "sourcesContent": ["'use strict'\n\nfunction oldBrowser () {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11')\n}\n\nvar crypto = global.crypto || global.msCrypto\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes\n} else {\n  module.exports = oldBrowser\n}\n\nfunction randomBytes (size, cb) {\n  // phantomjs needs to throw\n  if (size > 65536) throw new Error('requested too many random bytes')\n  // in case browserify  isn't using the Uint8Array version\n  var rawBytes = new global.Uint8Array(size)\n\n  // This will not work in older browsers.\n  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\n    crypto.getRandomValues(rawBytes)\n  }\n  // phantomjs doesn't like a buffer being passed here\n  var bytes = new Buffer(rawBytes.buffer)\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes)\n    })\n  }\n\n  return bytes\n}\n", "'use strict';\n\n// there's 3 implementations written in increasing order of efficiency\n\n// 1 - no Set type is defined\nfunction uniqNoSet(arr) {\n\tvar ret = [];\n\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tif (ret.indexOf(arr[i]) === -1) {\n\t\t\tret.push(arr[i]);\n\t\t}\n\t}\n\n\treturn ret;\n}\n\n// 2 - a simple Set type is defined\nfunction uniqSet(arr) {\n\tvar seen = new Set();\n\treturn arr.filter(function (el) {\n\t\tif (!seen.has(el)) {\n\t\t\tseen.add(el);\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\n// 3 - a standard Set type is defined and it has a forEach method\nfunction uniqSetWithForEach(arr) {\n\tvar ret = [];\n\n\t(new Set(arr)).forEach(function (el) {\n\t\tret.push(el);\n\t});\n\n\treturn ret;\n}\n\n// V8 currently has a broken implementation\n// https://github.com/joyent/node/issues/8449\nfunction doesForEachActuallyWork() {\n\tvar ret = false;\n\n\t(new Set([true])).forEach(function (el) {\n\t\tret = el;\n\t});\n\n\treturn ret === true;\n}\n\nif ('Set' in global) {\n\tif (typeof Set.prototype.forEach === 'function' && doesForEachActuallyWork()) {\n\t\tmodule.exports = uniqSetWithForEach;\n\t} else {\n\t\tmodule.exports = uniqSet;\n\t}\n} else {\n\tmodule.exports = uniqNoSet;\n}\n", "var arrayUniq = require('array-uniq');\n\nfunction Charset() {\n  this.chars = '';\n}\n\nCharset.prototype.setType = function(type) {\n  var chars;\n\n  var numbers     = '0123456789';\n  var charsLower  = 'abcdefghijklmnopqrstuvwxyz';\n  var charsUpper  = charsLower.toUpperCase();\n  var hexChars    = 'abcdef';\n  var binaryChars = '01';\n  var octalChars  = '01234567';\n\n  if (type === 'alphanumeric') {\n    chars = numbers + charsLower + charsUpper;\n  }\n  else if (type === 'numeric') {\n    chars = numbers;\n  }\n  else if (type === 'alphabetic') {\n    chars = charsLower + charsUpper;\n  }\n  else if (type === 'hex') {\n    chars = numbers + hexChars;\n  }\n  else if (type === 'binary') {\n    chars = binaryChars;\n  }\n  else if (type === 'octal') {\n    chars = octalChars;\n  }\n  else {\n    chars = type;\n  }\n\n  this.chars = chars;\n}\n\nCharset.prototype.removeUnreadable = function() {\n  var unreadableChars = /[0OIl]/g;\n  this.chars = this.chars.replace(unreadableChars, '');\n}\n\nCharset.prototype.setcapitalization = function(capitalization) {\n  if (capitalization === 'uppercase') {\n    this.chars = this.chars.toUpperCase();\n  }\n  else if (capitalization === 'lowercase') {\n    this.chars = this.chars.toLowerCase();\n  }\n}\n\nCharset.prototype.removeDuplicates = function() {\n  var charMap = this.chars.split('');\n  charMap = arrayUniq(charMap);\n  this.chars = charMap.join('');\n}\n\nmodule.exports = exports = Charset;\n", "\"use strict\";\n\nvar randomBytes = require('randombytes');\nvar Charset = require('./charset.js');\n\n\nfunction unsafeRandomBytes(length) {\n  var stack = [];\n  for (var i = 0; i < length; i++) {\n    stack.push(Math.floor(Math.random() * 255));\n  }\n\n  return {\n    length,\n    readUInt8: function (index) {\n      return stack[index];\n    }\n  };\n}\n\nfunction safeRandomBytes(length) {\n  try {\n    return randomBytes(length);\n  } catch (e) {\n    /* React/React Native Fix + Eternal loop removed */\n    return unsafeRandomBytes(length);\n  }\n}\n\nfunction processString(buf, initialString, chars, reqLen, maxByte) {\n  var string = initialString;\n  for (var i = 0; i < buf.length && string.length < reqLen; i++) {\n    var randomByte = buf.readUInt8(i);\n    if (randomByte < maxByte) {\n      string += chars.charAt(randomByte % chars.length);\n    }\n  }\n  return string;\n}\n\nfunction getAsyncString(string, chars, length, maxByte, cb) {\n  randomBytes(length, function(err, buf) {\n    if (err) {\n      // Since it is waiting for entropy, errors are legit and we shouldn't just keep retrying\n      cb(err);\n    }\n    var generatedString = processString(buf, string, chars, length, maxByte);\n    if (generatedString.length < length) {\n      getAsyncString(generatedString, chars, length, maxByte, cb);\n    } else {\n      cb(null, generatedString);\n    }\n  })\n}\n\nexports.generate = function(options, cb) {\n  var charset = new Charset();\n\n  var length, chars, capitalization, string = '';\n\n  // Handle options\n  if (typeof options === 'object') {\n    length = typeof options.length === 'number' ? options.length : 32;\n\n    if (options.charset) {\n      charset.setType(options.charset);\n    }\n    else {\n      charset.setType('alphanumeric');\n    }\n\n    if (options.capitalization) {\n      charset.setcapitalization(options.capitalization);\n    }\n\n    if (options.readable) {\n      charset.removeUnreadable();\n    }\n\n    charset.removeDuplicates();\n  }\n  else if (typeof options === 'number') {\n    length = options;\n    charset.setType('alphanumeric');\n  }\n  else {\n    length = 32;\n    charset.setType('alphanumeric');\n  }\n\n  // Generate the string\n  var charsLen = charset.chars.length;\n  var maxByte = 256 - (256 % charsLen);\n\n  if (!cb) {\n    while (string.length < length) {\n      var buf = safeRandomBytes(Math.ceil(length * 256 / maxByte));\n      string = processString(buf, string, charset.chars, length, maxByte);\n    }\n\n    return string;\n  }\n\n  getAsyncString(string, charset.chars, length, maxByte, cb);\n\n};\n", "module.exports = require(\"./lib/randomstring\");"],
  "mappings": "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",
  "names": ["require_randomstring"]
}
