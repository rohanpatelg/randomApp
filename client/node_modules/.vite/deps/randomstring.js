import {
  __commonJS
} from "./chunk-HUBM7RA2.js";

// node_modules/randombytes/browser.js
var require_browser = __commonJS({
  "node_modules/randombytes/browser.js"(exports, module) {
    "use strict";
    function oldBrowser() {
      throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
    }
    var crypto = global.crypto || global.msCrypto;
    if (crypto && crypto.getRandomValues) {
      module.exports = randomBytes;
    } else {
      module.exports = oldBrowser;
    }
    function randomBytes(size, cb) {
      if (size > 65536)
        throw new Error("requested too many random bytes");
      var rawBytes = new global.Uint8Array(size);
      if (size > 0) {
        crypto.getRandomValues(rawBytes);
      }
      var bytes = new Buffer(rawBytes.buffer);
      if (typeof cb === "function") {
        return process.nextTick(function() {
          cb(null, bytes);
        });
      }
      return bytes;
    }
  }
});

// node_modules/array-uniq/index.js
var require_array_uniq = __commonJS({
  "node_modules/array-uniq/index.js"(exports, module) {
    "use strict";
    function uniqNoSet(arr) {
      var ret = [];
      for (var i = 0; i < arr.length; i++) {
        if (ret.indexOf(arr[i]) === -1) {
          ret.push(arr[i]);
        }
      }
      return ret;
    }
    function uniqSet(arr) {
      var seen = /* @__PURE__ */ new Set();
      return arr.filter(function(el) {
        if (!seen.has(el)) {
          seen.add(el);
          return true;
        }
      });
    }
    function uniqSetWithForEach(arr) {
      var ret = [];
      new Set(arr).forEach(function(el) {
        ret.push(el);
      });
      return ret;
    }
    function doesForEachActuallyWork() {
      var ret = false;
      (/* @__PURE__ */ new Set([true])).forEach(function(el) {
        ret = el;
      });
      return ret === true;
    }
    if ("Set" in global) {
      if (typeof Set.prototype.forEach === "function" && doesForEachActuallyWork()) {
        module.exports = uniqSetWithForEach;
      } else {
        module.exports = uniqSet;
      }
    } else {
      module.exports = uniqNoSet;
    }
  }
});

// node_modules/randomstring/lib/charset.js
var require_charset = __commonJS({
  "node_modules/randomstring/lib/charset.js"(exports, module) {
    var arrayUniq = require_array_uniq();
    function Charset() {
      this.chars = "";
    }
    Charset.prototype.setType = function(type) {
      var chars;
      var numbers = "0123456789";
      var charsLower = "abcdefghijklmnopqrstuvwxyz";
      var charsUpper = charsLower.toUpperCase();
      var hexChars = "abcdef";
      var binaryChars = "01";
      var octalChars = "01234567";
      if (type === "alphanumeric") {
        chars = numbers + charsLower + charsUpper;
      } else if (type === "numeric") {
        chars = numbers;
      } else if (type === "alphabetic") {
        chars = charsLower + charsUpper;
      } else if (type === "hex") {
        chars = numbers + hexChars;
      } else if (type === "binary") {
        chars = binaryChars;
      } else if (type === "octal") {
        chars = octalChars;
      } else {
        chars = type;
      }
      this.chars = chars;
    };
    Charset.prototype.removeUnreadable = function() {
      var unreadableChars = /[0OIl]/g;
      this.chars = this.chars.replace(unreadableChars, "");
    };
    Charset.prototype.setcapitalization = function(capitalization) {
      if (capitalization === "uppercase") {
        this.chars = this.chars.toUpperCase();
      } else if (capitalization === "lowercase") {
        this.chars = this.chars.toLowerCase();
      }
    };
    Charset.prototype.removeDuplicates = function() {
      var charMap = this.chars.split("");
      charMap = arrayUniq(charMap);
      this.chars = charMap.join("");
    };
    module.exports = exports = Charset;
  }
});

// node_modules/randomstring/lib/randomstring.js
var require_randomstring = __commonJS({
  "node_modules/randomstring/lib/randomstring.js"(exports) {
    "use strict";
    var randomBytes = require_browser();
    var Charset = require_charset();
    function unsafeRandomBytes(length) {
      var stack = [];
      for (var i = 0; i < length; i++) {
        stack.push(Math.floor(Math.random() * 255));
      }
      return {
        length,
        readUInt8: function(index) {
          return stack[index];
        }
      };
    }
    function safeRandomBytes(length) {
      try {
        return randomBytes(length);
      } catch (e) {
        return unsafeRandomBytes(length);
      }
    }
    function processString(buf, initialString, chars, reqLen, maxByte) {
      var string = initialString;
      for (var i = 0; i < buf.length && string.length < reqLen; i++) {
        var randomByte = buf.readUInt8(i);
        if (randomByte < maxByte) {
          string += chars.charAt(randomByte % chars.length);
        }
      }
      return string;
    }
    function getAsyncString(string, chars, length, maxByte, cb) {
      randomBytes(length, function(err, buf) {
        if (err) {
          cb(err);
        }
        var generatedString = processString(buf, string, chars, length, maxByte);
        if (generatedString.length < length) {
          getAsyncString(generatedString, chars, length, maxByte, cb);
        } else {
          cb(null, generatedString);
        }
      });
    }
    exports.generate = function(options, cb) {
      var charset = new Charset();
      var length, chars, capitalization, string = "";
      if (typeof options === "object") {
        length = typeof options.length === "number" ? options.length : 32;
        if (options.charset) {
          charset.setType(options.charset);
        } else {
          charset.setType("alphanumeric");
        }
        if (options.capitalization) {
          charset.setcapitalization(options.capitalization);
        }
        if (options.readable) {
          charset.removeUnreadable();
        }
        charset.removeDuplicates();
      } else if (typeof options === "number") {
        length = options;
        charset.setType("alphanumeric");
      } else {
        length = 32;
        charset.setType("alphanumeric");
      }
      var charsLen = charset.chars.length;
      var maxByte = 256 - 256 % charsLen;
      if (!cb) {
        while (string.length < length) {
          var buf = safeRandomBytes(Math.ceil(length * 256 / maxByte));
          string = processString(buf, string, charset.chars, length, maxByte);
        }
        return string;
      }
      getAsyncString(string, charset.chars, length, maxByte, cb);
    };
  }
});

// node_modules/randomstring/index.js
var require_randomstring2 = __commonJS({
  "node_modules/randomstring/index.js"(exports, module) {
    module.exports = require_randomstring();
  }
});
export default require_randomstring2();
//# sourceMappingURL=randomstring.js.map
